stty -ixon
export EDITOR=vim
export TERM=xterm-256color
export GIT_DISCOVERY_ACROSS_FILESYSTEM=1
# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    alias ls='/bin/ls --color=auto'
    alias ll='/bin/ls -lh --color=auto'
    alias lsa='/bin/ls -alh --color=auto'
    alias llt='/bin/ls -lthr --color=auto'
    alias llT='/bin/ls -lth --color=auto'
    alias lls='/bin/ls -lShr --color=auto'
    alias llS='/bin/ls -lSh --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
else
    alias ll='ls -lh'
    alias lsa='ls -alh'
    alias llt='ls -lthr'
    alias llT='ls -lth'
    alias lls='ls -lShr'
    alias llS='ls -lSh'
fi

export GOROOT=$HOME/go
[ -d $GOROOT ] && export PATH=$GOROOT/bin${PATH:+:${PATH}} && export GOBIN=$GOROOT/bin

export GOPATH=$HOME/gopath
[ -d $GOPATH ] && export PATH=$GOPATH/bin${PATH:+:${PATH}} && export GOBIN=$GOPATH/bin

export NODEPATH=$HOME/.local/node
# export PATH=$HOME/.local/vim9/bin${PATH:+:${PATH}}
# export PATH=$HOME/.local/tmux/bin${PATH:+:${PATH}}
[ -d $NODEPATH ] && export PATH=$NODEPATH/bin${PATH:+:${PATH}}

# export PATH=$HOME/.local/ctags/bin${PATH:+:${PATH}}
# export PATH=$HOME/.local/gtags/bin${PATH:+:${PATH}}
export PATH=$HOME/.local/bin${PATH:+:${PATH}}

alias ..="cd ../"

MV() {
    # 参数数量检查，至少两个参数
    if [ "$#" -lt 2 ]; then
        echo "Usage: MV source1 [source2 ...] target"
        echo "       source can be file or directory"
        return 1
    fi

    # 取最后一个参数作为目标
    local target="${!#}"
    # 目标必须是目录
    if [ ! -d "$target" ]; then
        echo "Error: target '$target' is not a directory"
        return 2
    fi
    target=${target%/}

    # 计算除最后外的源参数数量
    local src_count=$(($# - 1))

    # 遍历所有源参数
    for ((i=1; i<=src_count; i++)); do
        local src="${!i}"

        # 检查源是否存在
        if [ ! -e "$src" ]; then
            echo "Warning: source '$src' does not exist, skipping."
            continue
        fi

        # 处理源是文件的情况
        if [ -f "$src" ]; then
            echo "Moving file '$src' to '$target' ..."

            # 使用 rsync 移动文件到目标目录，保持目录结构
            rsync -avhPL --remove-source-files --size-only "$src" "$target"
            echo "Finished moving file '$src' to '$target/'"
        # 处理源是目录的情况
        elif [ -d "$src" ]; then
            src=${src%/}
            echo "Moving directory '$src' to '$target' ..."

            # 使用 rsync 移动目录内容到目标目录的子目录中
            rsync -avhPL --remove-source-files --size-only "$src" "$target"

            # 删除源目录中的空目录
            find "$src" -type d -empty -delete 2>/dev/null

            # 如果源目录为空，删除它
            if [ -d "$src" ] && [ -z "$(ls -A "$src" 2>/dev/null)" ]; then
                rmdir "$src"
            fi

            echo "Finished moving directory '$src' to '$target'"
        else
            echo "Warning: source '$src' is neither a file nor a directory, skipping."
        fi
    done
}


SYNC() {
    # 参数数量检查，至少两个参数
    if [ "$#" -lt 2 ]; then
        echo "Usage: SYNC source1 [source2 ...] target"
        echo "       source can be file or directory"
        echo "       syncs files/directories to target and removes extra files in target"
        return 1
    fi

    # 取最后一个参数作为目标，并确保末尾没有斜杠
    local target="${!#%/}"
    # 目标必须是目录
    if [ ! -d "$target" ]; then
        echo "Error: target '$target' is not a directory"
        return 2
    fi

    # 计算除最后外的源参数数量
    local src_count=$(($# - 1))

    # 遍历所有源参数
    for ((i=1; i<=src_count; i++)); do
        local src="${!i}"

        # 检查源是否存在
        if [ ! -e "$src" ]; then
            echo "Warning: source '$src' does not exist, skipping."
            continue
        fi

        # 处理源是文件的情况
        if [ -f "$src" ]; then
            echo "Syncing file '$src' to '$target' ..."

            # 使用 rsync 同步文件到目标目录，不删除源文件，但删除目标目录中多余的文件
            rsync -avhPL --size-only --delete "$src" "$target"
            echo "Finished syncing file '$src' to '$target'"
        # 处理源是目录的情况
        elif [ -d "$src" ]; then
            src=${src%/}
            echo "Syncing directory '$src' to '$target' ..."

            # 使用 rsync 同步目录内容到目标目录的子目录中，删除目标目录中多余的文件
            rsync -avhPL --size-only --delete "$src" "$target"

            echo "Finished syncing directory '$src' to '$target'"
        else
            echo "Warning: source '$src' is neither a file nor a directory, skipping."
        fi
    done
}



alias CL="cd ~/.leovim"
alias CO="cd ~/.leovim.d"
alias CM="cd ~/miniconda3"
# alias CD="cd ~/docker"

alias GR='cd $(git rev-parse --show-toplevel)'
alias GIT="\\ls -A --group-directories-first -1 | while IFS= read -r line; do git log --color --format=\"\$(\\ls -d -F --color \"\$line\") =} %C(bold black)▏%Creset%Cred%h %Cgreen(%cr)%Creset =} %C(bold black)▏%Creset%s %C(bold blue)<%an>%Creset\" --abbrev-commit --max-count 1 HEAD -- \"\$line\"; done | awk -F'=}' '{ nf[NR]=NF; for (i = 1; i <= NF; i++) { cell[NR,i] = \$i; gsub(/\\033\\[([[:digit:]]+(;[[:digit:]]+)*)?[mK]/, \"\", \$i); len[NR,i] = l = length(\$i); if (l > max[i]) max[i] = l; } } END { for (row = 1; row <= NR; row++) { for (col = 1; col < nf[row]; col++) printf \"%s%*s%s\", cell[row,col], max[col]-len[row,col], \"\", OFS; print cell[row,nf[row]]; } }'"
alias RG='rg --no-heading '

alias tmp='cd /tmp'
alias disks="df -lh | head -1; df -lh | sort | grep -vE '^/srv' |  grep -E '/home|/srv|/export|/data|/mnt|/media|/docker|/work|/$'"
# alias clash="https_proxy=http://127.0.0.1:7897 http_proxy=http://127.0.0.1:7897 all_proxy=http://127.0.0.1:7897 "

alias v='bash ~/.local/bin/v.sh'
alias n='bash ~/.local/bin/n.sh'
alias vi='bash ~/.local/bin/vi.sh'
alias nv='bash ~/.local/bin/nv.sh'
alias ni='bash ~/.local/bin/ni.sh'
alias nn='bash ~/.local/bin/nn.sh'

# Z jumps command
if command_exists "lua" && [ -f ~/z.lua/z.lua ]; then
    eval "$(lua ~/z.lua/z.lua  --init bash once enhanced)"
    alias zz='z -c' # 严格匹配当前路径的子路径
    alias zr='z -r' # 跳转到包含关键字并且访问次数最高的路径
    alias zt='z -t' # 跳转到包含关键字并且最近访问过的路径
    alias zl='z -l' # 不跳转，只是列出所有匹配的路径
    alias ze='z -e' # 不跳转，只是打印出匹配并且权重最高的路径
    alias zi='z -i' # 使用交互式选择模式
    alias zf='z -I' # 使用 fzf 对多个结果进行选择
    alias zb='z -b' # 快速回到父目录
fi

if [ -f ~/.local/bin/z.sh ]; then
    source ~/.local/bin/z.sh
fi

function en() {
    conda activate $(conda info --env | grep -v "^#" | fzf --reverse | awk '{print $NF}')
}

function d2c() {
    if [[ $# < 1 ]]; then
        echo ====== please input image name =======
        return
    else
        img=$1
        if [[ $# > 1 ]]; then
            ns=$2
        else
            ns=k8s.io
        fi
    fi
    cmd="docker pull $img && docker save $img | ctr -n=$ns images import -"
    echo $cmd
    eval $cmd
}


alias cfi="cd $HOME/miniconda3/bin && ./conda install -c conda-forge "
alias cpi="cd $HOME/miniconda3/bin && ./pip install "

# Function to link conda binaries to ~/.local/bin
function lnc() {
    # Check number of parameters
    if [ $# -lt 1 ] || [ $# -gt 2 ]; then
        echo "Error: Function requires 1 or 2 parameters"
        return 1
    fi

  # Check for special characters in parameters
  if [[ "$1" =~ [\/\\'\"'] ]]; then
      echo "Error: First parameter contains quotes or slashes"
      return 1
  fi

  if [[ "$1" =~ [^a-zA-Z0-9_.-] ]]; then
      echo "Error: First parameter contains other special characters"
      return 1
  fi

  if [ $# -eq 2 ] && [[ "$2" =~ [\/\\'\"'] ]]; then
      echo "Error: Second parameter contains quotes or slashes"
      return 1
  fi

  if [ $# -eq 2 ] && [[ "$2" =~ [^a-zA-Z0-9_.-] ]]; then
      echo "Error: Second parameter contains other special characters"
      return 1
  fi

  # Check if executable exists
  local conda_bin_path="$HOME/miniconda3/bin/$1"
  if [ ! -f "$conda_bin_path" ] || [ ! -x "$conda_bin_path" ]; then
      echo "Error: Executable '$1' not found in ~/miniconda3/bin/"
      return 1
  fi

  # Create symbolic link
  local target_name="$1"
  if [ $# -eq 2 ]; then
      target_name="$2"
  fi

  mkdir -p "$HOME/.local/bin"
  ln -sf "$conda_bin_path" "$HOME/.local/bin/$target_name"
  echo "Successfully linked $conda_bin_path to $HOME/.local/bin/$target_name"
}

function sf() {
    FILE=$(rg --column --no-heading -e "$1" -g "$2" | fzf -d':' --reverse --no-sort \
        --preview 'bat --style=full --color=always --highlight-line {2} {1}' \
        --preview-window '~3:+{2}+3/2,right:50%' \
        --bind 'ctrl-y:preview-up,ctrl-e:preview-down' \
        --bind 'ctrl-b:preview-page-up,ctrl-f:preview-page-down' \
        --bind 'ctrl-u:preview-half-page-up,ctrl-d:preview-half-page-down' \
        --bind 'shift-up:preview-top,shift-down:preview-bottom' \
        --bind 'alt-up:half-page-up,alt-down:half-page-down' \
        --bind 'ctrl-]:execute(tmux split-window -h "vim +{2} {1}")' \
        --bind 'ctrl-x:execute(tmux split-window -v "vim +{2} {1}")' \
        | awk -F : '{print $1,"+"$2}')
            if [ -n "$FILE" ]; then
                vim $FILE
            fi
        }

# tm command to creater monitor panels
function tm() {
    # 1. Check if we're already in a tmux session
    if [ -z "$TMUX" ]; then
        # 1.1 & 1.2: Not in tmux, check if sessions exist
        if tmux has-session 2>/dev/null; then
            # 1.1: Sessions exist, attach to first one
            tmux attach-session
        else
            # 1.2: No sessions, create a new one
            tmux new-session
        fi
    fi
    # tmux set-option -g default-shell /bin/bash
    # tmux set-option -g default-shell /bin/zsh
    # 2. Now we're in tmux, check if monitor window exists
    if tmux list-windows | grep -q "monitor"; then
        # 2.1: Monitor window exists, switch to it
        tmux select-window -t monitor
    else
        # Create a new window named 'monitor'
        tmux new-window -t 0 -n monitor
        # Split vertically (creating left and right panes)
        tmux split-window -h
        # Split the left pane horizontally
        tmux select-pane -t 0
        tmux split-window -v
        # Split the right pane horizontally
        tmux select-pane -t 1
        tmux split-window -v
        # Adjust the vertical split to 2:1 ratio
        tmux select-pane -t 1
        tmux resize-pane -y 66%
        tmux select-pane -t 3
        tmux resize-pane -y 66%
        # Run commands in each pane
        tmux select-pane -t 1
        tmux send-keys "btop" C-m
        tmux select-pane -t 2
        tmux send-keys "htop" C-m
        tmux select-pane -t 3
        tmux send-keys "nvitop" C-m
        tmux select-pane -t 4
        tmux send-keys "watch gpustat -f" C-m
    fi
}

# ln and graphic card order
if [ -f /usr/bin/batcat ] && [ ! -f $HOME/.local/bin/bat ]; then
    mkdir -p $HOME/.local/bin
    ln -sf /usr/bin/batcat $HOME/.local/bin/bat
elif [ -f /usr/local/bin/batcat ] && [ ! -f $HOME/.local/bin/bat ]; then
    mkdir -p $HOME/.local/bin
    ln -sf /usr/local/bin/batcat $HOME/.local/bin/bat
fi
export CUDA_DEVICE_ORDER=PCI_BUS_ID
