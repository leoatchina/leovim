*vim-funky.txt*

Author:  Takahiro Yoshihara 
Fork: leoatchina <leoatchina@outlook.com>

==============================================================================
CONTENTS					*vim-funky-contents*

Introduction			|vim-funky-intro|
Commands			|vim-funky-commands|
Settings			|vim-funky-settings|
Filetype Settings		|vim-funky-filetype-settings|
Filter Implementation Guide	|vim-funky-filter-guide|
Thanks				|vim-funky-thanks|
changelog			|vim-funky-changelog|
License				|vim-funky-license|
About				|vim-funky-about|


==============================================================================
INTRODUCTION					*vim-funky-intro*

|vim-funky| is an extension of vim. Please make sure you have

Currently, |vim-funky| supports following file types:

* c
* cf (ColdFusion)
* clojure
* cmm (TRACE32)
* coffee-script
* coldfusion
* cpp (C++)
* cs (C#)
* css (css, scss)
* dart
* elixir
* elm
* go (Golang)
* graphql
* groovy
* haskell
* html/xhtml
* java
* javascript
* jinja (template engine for Python)
* lua
* make (Makefile)
* markdown
* moon (MoonScript)
* nerdtree
* objc (Objective-C)
* perl
* php
* plsql (PL/SQL)
* proto (Protocol Buffers)
* python
* r
* rmd (rmarkdown)
* ruby (ruby, rake, rspec and chef recipe)
* rust
* scala
* sh (bash, dash and zsh)
* sql
* tex (LaTeX)
* thrift
* typescript
* vb (Visual Basic)
* vim
* vue (Vue.js)
* yaml


==============================================================================
SETTINGS					*vim-funky-settings*
You can customise the behaviour of |vim-funky| using these variables.

					*'g:funky_after_jump'*
After the cursor has jumped to your wanted function line, what do you usually
tap before getting into real work? '|zo|', '|zx|', '|zx||zt|', or '|zv||zz|'
etc.  A valid action string consists of two parts:
    The first part can be one of  '|zx|', '|zv|', '|zo|' or '|zO|' for
    setting the fold view. If |foldenable| if off, then this part has no
    effect.  The second part can be one of '|zt|', '|zz|' for scrolling the
    screen.
Both of them can be '', which means nothing will be done.
The |g:funky_after_jump| can be a single string:
(default: 'zxzz')
>
       let g:funky_after_jump = 'zxzt'
<
which affects all filetypes, or it can be a |Dictionary| as follows:
>
       let g:funky_after_jump = {
            \ 'default' : 'zxzz',
            \ 'python'  : 'zO',
            \ 'cpp'     : 'zxzt',
            \ 'go'      : 'zz',
            \ 'vim'     : '',
       \ }
<
If you want to leave some 'margin' after 'z[tb]', see |scrolloff|.


					*'g:funky_multi_buffers'*
If this is enabled (=1), Funky searches function defs from all buffers.
So you can go back and forth in buffers using this functionality.
Note that this makes disabled |'g:funky_sort_by_mru'| as at 0.10.0.
(default: 0)
(value: 0 or 1)
>
	let g:funky_multi_buffers = 1
<

					*'g:funky_sort_by_mru'*
If this is enabled (=1), the list is sorted by MRU (most recently used).
In short, the most recently used function definition appears at the top of
the list.
Note that the MRU feature doesn't work persistently: If you delete
the buffer or once you quit Vim, the order of the list is reset to default.
(default: 0)
(value: 0 or 1)
>
	let g:funky_sort_by_mru = 1
<


					*'g:funky_syntax_highlight'*
If this is enabled (=1), the |syntax-highlighting| feature is enabled for the
fzf-buffer. It just sets |filetype| of the fzf-buffer to the same as the
current buffer.
(default: 0)
>
	let g:funky_syntax_highlight = 1
<


					*'g:funky_matchtype'*
This changes the matching algorithm used by |fzf|.vim. If you want 
matched chars to be highlighted, you may set this option to 'path'.
Note that this option changes the matching algorithm, so the filtered
result may be affected. 
Other possible values are 'tabs' and 'tabe', however, I don't think it's
useful setting these values.
(default: 'line')
(value: 'line', 'path', 'tabs', 'tabe')
>
	let g:funky_matchtype = 'line'
<

					*'g:funky_nolim'*
This allows you to switch to no-limit mode. By default, the funky buffer is
not scrollable = limit mode.
(default: 0)
(value: 0 or 1)
>
	let g:funky_nolim = 1
<

					*'g:funky_nudists'*
Some filetypes support nudist mode that allows you to find quickly a function you want.
If the filetype is contained in this variable you may see just function name in fzf window.
(default: undef)
(value: List)
>
	let g:funky_nudists = [ 'php' ]
<

==============================================================================
FILETYPE SETTINGS			*vim-funky-filetype-settings*
This section describes |vim-funky| configuration for each filetype.


[chef]					*vim-funky-chef*
					*'g:funky_chef_lwrp'*
Set this to 1 (enabled) for the results to include LWRP.
http://docs.opscode.com/lwrp.html#opscode-maintained
(default: 1)
(value: 0 or 1)
>
	let g:funky_chef_lwrp = 0
<

					*'g:funky_chef_custom_resources'*
You can set Chef resources that you defined to this variable.
The resources which are set to this variable will be picked up by |vim-funky|.
http://docs.opscode.com/resource.html#common-functionality
(default: [])
>
	let g:funky_chef_custom_resources = ['rabbitmq', 'nodejs']
<

[go]					*vim-funky-go*
					*'g:funky_go_types'*
Set this to 1 (enabled) and the results will include type declarations.
(default: 1)
(value: 0 or 1)
>
	let g:funky_go_types = 0
<

[nerdtree]				*vim-funky-nerdtree*
					*'g:funky_nerdtree_include_files'*
Set this to 1 (enabled) and the results will include files.
(default: 0)
(value: 0 or 1)
>
	let g:funky_nerdtree_include_files = 1
<

[php]					*vim-funky-php*
					*'g:funky_php_requires'*
Set this to 1 (enabled) and the results will include 'require' and
'require_once' lines.
(default: 0)
(value: 0 or 1)
>
	let g:funky_php_requires = 1
<

					*'g:funky_php_includes'*
Set this to 1 (enabled) and the results will include 'include' and
'include_once' lines.
(default: 0)
>
	let g:funky_php_include = 1
<

[ruby]					*vim-funky-ruby*
					*'g:funky_ruby_requires'*
Set this to 1 (enabled) and the results will include 'require' and
'require_relative' lines.
(default: 0)
(value: 0 or 1)
>
	let g:funky_ruby_requires = 1
<

					*'g:funky_ruby_classes'*
Set this to 1 (enabled) and the results will include class definitions.
(default: 1)
(value: 0 or 1)
>
	let g:funky_ruby_classes = 0
<

					*'g:funky_ruby_modules'*
Set this to 1 (enabled) and the results will include module definitions.
(default: 1)
(value: 0 or 1)
>
	let g:funky_ruby_modules = 0
<

					*'g:funky_ruby_contains_rake'*
This option is no longer available. Use |g:funky_ruby_rake_words|
instead. [OBSOLETE]

					*'g:funky_ruby_rake_words*
Set this to 1 (enabled) and the 'rake' filter will be absorbed.
(default: 0)
(value: 0 or 1)
>
	let g:funky_ruby_rake_words = 1
<

					*'g:funky_ruby_chef_words'*
Set this to 1 (enabled) and the 'chef' filter will be absorbed.
(default: 0)
(value: 0 or 1)
>
	let g:funky_ruby_chef_words = 1
<

					*'g:funky_ruby_access'*
Set this to 1 (enabled) and the result will include access modifiers such as
'private', 'protected' and 'public'.
(default: 1)
(value: 0 or 1)
>
	let g:funky_ruby_access = 1
<

					*'g:funky_ruby_rspec'*
Set this to 1 (enabled) and the result will include rspec definitions like
'context', 'scenario', 'feature', 'describe' and 'it'.
(default: 1)
(value: 0 or 1)
>
	let g:funky_ruby_rspec = 1
<

[sh]					*vim-funky-sh*
					*'g:funky_sh_type*
Nowadays, '/bin/sh' is usually an alias (symlink) of another shell such as
bash, ksh, etc. You can specify Funky's internal filetype for 'sh'.
If this is set to 'dash', Funky treats 'sh' as 'dash'.
(default: 'bash')
(value: 'bash', 'dash', 'sh', 'zsh')
>
	let g:funky_sh_type = 'zsh'
<

FILTER IMPLEMENTATION GUIDE			*vim-funky-filter-guide*
This section describes how to implement your own filter.
The internal API has been changed since |vim-funky| version 0.6.0.
Therefore, if the filter uses the old API you may get an error.

						*vim-funky-api-v0.6.0*
						*vim-funky-create-own-filter*
The filetype filter must have an |autoload| function named 'filters'.
This 'filters' function must return a |List| which contains |Dictionaries|.
And each |Dictionary| must have 'pattern' and 'formatter' as keys.
NOTE: directory structure has been changed since v0.9.1.

This example is for 'vim'.
>
  function! funky#ft#vim#filters()
    let filters = [
          \ { 'pattern': '\m\C^[\t ]*function!\?[\t ]\+\S\+',
          \   'formatter': ['\m\C^[\t ]*', '', ''] }
    \ ]

    " You can highlight whatever in the |fzf|.vim window if you want
    call funky#highlight('^[\t ]*function[\t ]',
                             \ 'fzfFunkyVimFunc', 'Function')

    return filters
  endfunction
<
[Meaning of the filter's keys]
String	pattern~
  This is a regexp to extract function definitions.

List	formatter~
  |vim-funky| formats each line that is extracted from the current buffer
  using the values of this item. Actually, these items are simply passed as
  arguments to the |substitute()| function.
  The sample function above removes leading whitespace.


==============================================================================
THANKS						*vim-funky-thanks*

  * *kien* <github.com/kien> - the author of fzf.vim

  * *pydave*          <https://github.com/pydave>
  * *curist*          <https://github.com/curist>
  * *Benoit*          <https://github.com/saalaa>
  * *tokorom*         <https://github.com/tokorom>
  * *robmiller*       <https://github.com/robmiller>
  * *unc0*            <https://github.com/unc0>
  * *hlissner*        <https://github.com/hlissner>
  * *mephux*          <https://github.com/mephux>
  * *dusans*          <https://github.com/dusans>
  * *kirstein*        <https://github.com/kirstein>
  * *mmazer*          <https://github.com/mmazer>
  * *vitalk*          <https://github.com/vitalk>
  * *dingmingxin*     <https://github.com/dingmingxin>
  * *dictav*          <https://github.com/dictav>
  * *axehead*         <https://github.com/axehead>
  * *walkingsparrow*  <https://github.com/walkingsparrow>
  * *huaihuaiVV*      <https://github.com/huaihuaiVV>
  * *rendon*          <https://github.com/rendon>
  * *kshenoy*         <https://github.com/kshenoy>
  * *mattiaslundberg* <https://github.com/mattiaslundberg>
  * *prabirshrestha*  <https://github.com/prabirshrestha>
  * *siadat*          <https://github.com/siadat>
  * *jean*            <https://github.com/jean>
  * *Komnomnomnom*    <https://github.com/Komnomnomnom>
  * *timfeirg*        <https://github.com/timfeirg>
  * *h14i*            <https://github.com/h14i>
  * *ggVGc*           <https://github.com/ggVGc>
  * *senft*           <https://github.com/senft>
  * *bmenant*         <https://github.com/bmenant>
  * *fufler*          <https://github.com/fufler>
  * *metainfa*        <https://github.com/metainfa>
  * *svenwin*         <https://github.com/svenwin>
  * *anstosa*         <https://github.com/anstosa>
  * *imran-uk*        <https://github.com/imran-uk>
  * *francescarpi*    <https://github.com/francescarpi>
  * *somini*          <https://github.com/somini>
  * *zaynetro*        <https://github.com/zaynetro>
  * *lorenzo*         <https://github.com/lorenzo>
  * *minhajuddin*     <https://github.com/minhajuddin>
  * *mklinga*         <https://github.com/mklinga>
  * *jagtesh*         <https://github.com/jagtesh>
  * *haifengkao*      <https://github.com/haifengkao>
  * *feiyuw*          <https://github.com/feiyuw>
  * *holybreath*      <https://github.com/holybreath>
  * *arashm*          <https://github.com/arashm>
  * *cenksoykan*      <https://github.com/cenksoykan>


==============================================================================
LICENSE						*vim-funky-license*

|vim-funky| is distributed under the MIT License.

Copyright (c) 2012-2019 Takahiro Yoshihara

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


==============================================================================
ABOUT                                           *vim-funky-about*

The latest version is available on GitHub:

https://github.com/leoatchina/vim-funky


vim:fen:fdm=marker:tw=78:et:ts=8:ft=help:norl:
